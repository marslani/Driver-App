// import React, { useState, useEffect, useRef } from "react";
// import axios from "axios";
// import "./App.css";

// const API_BASE = "http://localhost:5000/api";

// const App = () => {
//   const [driverName] = useState("");
//   const [loading, setLoading] = useState(false);
//   const [message, setMessage] = useState("");
//   const [logs, setLogs] = useState([]);
//   const [timeLeft, setTimeLeft] = useState(0);
//   const [currentIndex, setCurrentIndex] = useState(0);

//   const intervalRef = useRef(null);
//   const timeoutRef = useRef(null);
//   const emailSentRef = useRef(false);

//   const checkpoints = [
//     "Leave Dealer Office",
//     "Arrive at UCIC Plant",
//     "Arrive at Sales Office",
//     "Arrive at Weighbridge",
//     "Leave UCIC Plant",
//     "Arrive at Delivery Location",
//   ];

//   const clearTimers = () => {
//     if (intervalRef.current) {
//       clearInterval(intervalRef.current);
//       intervalRef.current = null;
//     }
//     if (timeoutRef.current) {
//       clearTimeout(timeoutRef.current);
//       timeoutRef.current = null;
//     }
//   };

//   const sendDelayEmail = async () => {
//     if (emailSentRef.current) return;
//     emailSentRef.current = true;

//     try {
//       await axios.post(`${API_BASE}/delay-email`, { driverName });
//       console.log("Delay email sent!");
//     } catch (err) {
//       console.error("Email send failed", err);
//     }
//   };

//   const startTimer = (seconds) => {
//     clearTimers();
//     emailSentRef.current = false;
//     setTimeLeft(seconds);

//     intervalRef.current = setInterval(() => {
//       setTimeLeft((prev) => {
//         if (prev <= 1) {
//           clearInterval(intervalRef.current);
//           intervalRef.current = null;
//           return 0;
//         }
//         return prev - 1;
//       });
//     }, 1000);

//     timeoutRef.current = setTimeout(() => {
//       if (!emailSentRef.current) {
//         alert("‚ö†Ô∏è 3 hours passed! Driver has not pressed the next point.");
//         sendDelayEmail();
//       }
//       setTimeLeft(0);
//       clearTimers();
//     }, seconds * 1000);
//   };

//   const formatTime = (seconds) => {
//     const h = Math.floor(seconds / 3600);
//     const m = Math.floor((seconds % 3600) / 60);
//     const s = seconds % 60;
//     return `${h.toString().padStart(2, "0")}:${m
//       .toString()
//       .padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
//   };

//   const handleCheckpoint = async (pointName) => {
//     setLoading(true);
//     setMessage("");
//     navigator.geolocation.getCurrentPosition(
//       async (position) => {
//         const gps = {
//           lat: position.coords.latitude,
//           lng: position.coords.longitude,
//         };
//         try {
//           await axios.post(`${API_BASE}/checkpoint`, { driverName, pointName, gps });
//           setMessage(`‚úÖ ${pointName} recorded successfully!`);
//           setCurrentIndex((prev) => prev + 1);
//           startTimer(60); // demo: 1 minute
//           fetchLogs();
//         } catch (err) {
//           console.error(err);
//           setMessage("‚ùå Error sending data!");
//         } finally {
//           setLoading(false);
//         }
//       },
//       (err) => {
//         console.error(err);
//         setLoading(false);
//         alert("GPS permission denied!");
//       }
//     );
//   };

//   const fetchLogs = async () => {
//     try {
//       const res = await axios.get(`${API_BASE}/logs`);
//       setLogs(res.data);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   useEffect(() => {
//     const interval = setInterval(fetchLogs, 5000);
//     return () => clearInterval(interval);
//   }, []);

//   useEffect(() => {
//     return () => {
//       clearTimers();
//     };
//   }, []);

//   const progress = timeLeft > 0 ? (timeLeft / (3 * 60 * 60)) * 100 : 0;

//   return (
//     <div className="app-container">
//       <h1>üöõ Driver Log App</h1>

//       {timeLeft > 0 && (
//         <div className="circle-timer">
//           <svg width="180" height="180">
//             <circle
//               stroke="url(#grad)"
//               strokeWidth="10"
//               fill="transparent"
//               r="75"
//               cx="90"
//               cy="90"
//               style={{
//                 strokeDasharray: `${2 * Math.PI * 75}`,
//                 strokeDashoffset: `${2 * Math.PI * 75 * ((100 - progress) / 100)}`,
//                 transition: "stroke-dashoffset 1s linear",
//               }}
//             />
//             <defs>
//               <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
//                 <stop offset="0%" stopColor="#00ff9d" />
//                 <stop offset="100%" stopColor="#00aaff" />
//               </linearGradient>
//             </defs>
//           </svg>
//           <div className="timer-text">{formatTime(timeLeft)}</div>
//         </div>
//       )}

//       {/* ‚úÖ Buttons with color change */}
//       <div className="button-container">
//         {checkpoints.map((point, i) => (
//           <button
//             key={i}
//             onClick={() => handleCheckpoint(point)}
//             disabled={loading || i !== currentIndex}
//             className={`btn ${
//               i < currentIndex
//                 ? "completed"
//                 : i === currentIndex
//                 ? "active"
//                 : "upcoming"
//             }`}
//           >
//             {point}
//           </button>
//         ))}
//       </div>

//       {loading && <p>‚è≥ Sending data...</p>}
//       {message && <p className="message">{message}</p>}

//       <div className="table-container">
//         <h2>üìä Last 1 Minute Logs</h2>
//         <table>
//           <thead>
//             <tr>
//               <th>Point</th>
//               <th>Latitude</th>
//               <th>Longitude</th>
//               <th>Time</th>
//             </tr>
//           </thead>
//           <tbody>
//             {logs.length === 0 ? (
//               <tr>
//                 <td colSpan="5">No logs in the last 1 minute</td>
//               </tr>
//             ) : (
//               logs.map((log, li) =>
//                 log.checkpoints.map((cp, i) => (
//                   <tr key={`${li}-${i}`}>
//                     <td>{cp.pointName}</td>
//                     <td>{cp.gps.lat}</td>
//                     <td>{cp.gps.lng}</td>
//                     <td>{new Date(cp.timestamp).toLocaleTimeString()}</td>
//                   </tr>
//                 ))
//               )
//             )}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default App;
























// import React, { useState, useEffect, useRef } from "react";
// import axios from "axios";
// import "./App.css";

// const API_BASE = "http://localhost:5000/api";

// const App = () => {
//   const [driverName] = useState("");
//   const [loading, setLoading] = useState(false);
//   const [message, setMessage] = useState("");
//   const [logs, setLogs] = useState([]);
//   const [timeLeft, setTimeLeft] = useState(0);
//   const [currentIndex, setCurrentIndex] = useState(0);

//   const intervalRef = useRef(null);
//   const timeoutRef = useRef(null);
//   const emailSentRef = useRef(false);

//   const checkpoints = [
//     "Leave Dealer Office",
//     "Arrive at UCIC Plant",
//     "Arrive at Sales Office",
//     "Arrive at Weighbridge",
//     "Leave UCIC Plant",
//     "Arrive at Delivery Location",
//   ];

//   const clearTimers = () => {
//     if (intervalRef.current) {
//       clearInterval(intervalRef.current);
//       intervalRef.current = null;
//     }
//     if (timeoutRef.current) {
//       clearTimeout(timeoutRef.current);
//       timeoutRef.current = null;
//     }
//   };

//   const sendDelayEmail = async () => {
//     if (emailSentRef.current) return;
//     emailSentRef.current = true;

//     try {
//       await axios.post(`${API_BASE}/delay-email`, { driverName });
//       console.log("Delay email sent!");
//     } catch (err) {
//       console.error("Email send failed", err);
//     }
//   };

//   const startTimer = (seconds) => {
//     clearTimers();
//     emailSentRef.current = false;
//     setTimeLeft(seconds);

//     intervalRef.current = setInterval(() => {
//       setTimeLeft((prev) => {
//         if (prev <= 1) {
//           clearInterval(intervalRef.current);
//           intervalRef.current = null;
//           return 0;
//         }
//         return prev - 1;
//       });
//     }, 1000);

//   timeoutRef.current = setTimeout(() => {
//   if (!emailSentRef.current) {
//     setMessage("‚ö†Ô∏è 3 ⁄Ø⁄æŸÜŸπ€í ⁄Øÿ≤ÿ± ⁄Øÿ¶€í €Å€å⁄∫! ⁄àÿ±ÿßÿ¶€åŸàÿ± ŸÜ€í ÿß⁄ØŸÑÿß ŸæŸàÿßÿ¶ŸÜŸπ Ÿæÿ±€åÿ≥ ŸÜ€Å€å⁄∫ ⁄©€åÿß€î");
//     sendDelayEmail();
//   }
//   setTimeLeft(0);
//   clearTimers();
// }, seconds * 1000);






//   };




  


//   const formatTime = (seconds) => {
//     const h = Math.floor(seconds / 3600);
//     const m = Math.floor((seconds % 3600) / 60);
//     const s = seconds % 60;
//     return `${h.toString().padStart(2, "0")}:${m
//       .toString()
//       .padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
//   };

//   const handleCheckpoint = async (pointName) => {
//     setLoading(true);
//     setMessage("");
//     navigator.geolocation.getCurrentPosition(
//       async (position) => {
//         const gps = {
//           lat: position.coords.latitude,
//           lng: position.coords.longitude,
//         };
//         try {
//           await axios.post(`${API_BASE}/checkpoint`, { driverName, pointName, gps });
//           setMessage(`‚úÖ ${pointName} recorded successfully!`);
//           setCurrentIndex((prev) => prev + 1);
//           startTimer(60); // 1 minute for demo
//           fetchLogs();
//         } catch (err) {
//           console.error(err);
//           setMessage("‚ùå Error sending data!");
//         } finally {
//           setLoading(false);
//         }
//       },
//       (err) => {
//         console.error(err);
//         setLoading(false);
//         alert("GPS permission denied!");
//       }
//     );
//   };

//   const fetchLogs = async () => {
//     try {
//       const res = await axios.get(`${API_BASE}/logs`);
//       setLogs(res.data);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   useEffect(() => {
//     const interval = setInterval(fetchLogs, 5000);
//     return () => clearInterval(interval);
//   }, []);

//   useEffect(() => {
//     return () => {
//       clearTimers();
//     };
//   }, []);

//   const progressPercent = Math.round((currentIndex / checkpoints.length) * 100);
//   const progress = timeLeft > 0 ? (timeLeft / (3 * 60 * 60)) * 100 : 0;

//   return (
//     <div className="app-container">
//       <h1>üöõ Driver Log App</h1>

//       {/* Progress Bar */}
//       <div className="progress-bar">
//         <div
//           className="progress-fill"
//           style={{ width: `${progressPercent}%` }}
//         ></div>
//       </div>
//       <p className="progress-text">Progress: {progressPercent}%</p>

//       {/* Timer */}
//       {timeLeft > 0 && (
//         <div className="circle-timer">
//           <svg width="180" height="180">
//             <circle
//               stroke="url(#grad)"
//               strokeWidth="10"
//               fill="transparent"
//               r="75"
//               cx="90"
//               cy="90"
//               style={{
//                 strokeDasharray: `${2 * Math.PI * 75}`,
//                 strokeDashoffset: `${2 * Math.PI * 75 * ((100 - progress) / 100)}`,
//                 transition: "stroke-dashoffset 1s linear",
//               }}
//             />
//             <defs>
//               <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
//                 <stop offset="0%" stopColor="#00ff9d" />
//                 <stop offset="100%" stopColor="#00aaff" />
//               </linearGradient>
//             </defs>
//           </svg>
//           <div className="timer-text">{formatTime(timeLeft)}</div>
//         </div>
//       )}

//       {/* Buttons */}
//       <div className="button-container">
//         {checkpoints.map((point, i) => (
//           <button
//             key={i}
//             onClick={() => handleCheckpoint(point)}
//             disabled={loading || i !== currentIndex}
//             className={`btn ${
//               i < currentIndex
//                 ? "completed"
//                 : i === currentIndex
//                 ? "active"
//                 : "upcoming"
//             }`}
//           >
//             {point}
//           </button>
//         ))}
//       </div>

//       {loading && <p>‚è≥ Sending data...</p>}
//       {message && <p className="message">{message}</p>}

//       {/* Logs Table */}
//       <div className="table-container">
//         <h2>üìä Last 1 Minute Logs</h2>
//         <table>
//           <thead>
//             <tr>
//               <th>Point</th>
//               <th>Latitude</th>
//               <th>Longitude</th>
//               <th>Time</th>
//             </tr>
//           </thead>
//           <tbody>
//             {logs.length === 0 ? (
//               <tr>
//                 <td colSpan="5">No logs in the last 1 minute</td>
//               </tr>
//             ) : (
//               logs.map((log, li) =>
//                 log.checkpoints.map((cp, i) => (
//                   <tr key={`${li}-${i}`}>
//                     <td>{cp.pointName}</td>
//                     <td>{cp.gps.lat}</td>
//                     <td>{cp.gps.lng}</td>
//                     <td>{new Date(cp.timestamp).toLocaleTimeString()}</td>
//                   </tr>
//                 ))
//               )
//             )}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default App;

















































// import React, { useState, useEffect, useRef } from "react";
// import axios from "axios";
// import "./App.css";

// const API_BASE = "http://localhost:5000/api";

// const App = () => {
//   const [driverName] = useState("");
//   const [loading, setLoading] = useState(false);
//   const [message, setMessage] = useState("");
//   const [logs, setLogs] = useState([]);
//   const [timeLeft, setTimeLeft] = useState(0);
//   const [currentIndex, setCurrentIndex] = useState(0);
//   const [showWarning, setShowWarning] = useState(false);

//   const intervalRef = useRef(null);
//   const timeoutRef = useRef(null);
//   const emailSentRef = useRef(false);

//   const checkpoints = [
//     "Leave Dealer Office",
//     "Arrive at UCIC Plant",
//     "Arrive at Sales Office",
//     "Arrive at Weighbridge",
//     "Leave UCIC Plant",
//     "Arrive at Delivery Location",
//   ];

//   const clearTimers = () => {
//     if (intervalRef.current) {
//       clearInterval(intervalRef.current);
//       intervalRef.current = null;
//     }
//     if (timeoutRef.current) {
//       clearTimeout(timeoutRef.current);
//       timeoutRef.current = null;
//     }
//   };

//   const sendDelayEmail = async () => {
//     if (emailSentRef.current) return;
//     emailSentRef.current = true;

//     try {
//       await axios.post(`${API_BASE}/delay-email`, { driverName });
//       console.log("Delay email sent!");
//     } catch (err) {
//       console.error("Email send failed", err);
//     }
//   };

//   const startTimer = (seconds) => {
//     clearTimers();
//     emailSentRef.current = false;
//     setShowWarning(false);
//     setTimeLeft(seconds);

//     intervalRef.current = setInterval(() => {
//       setTimeLeft((prev) => {
//         if (prev <= 1) {
//           clearInterval(intervalRef.current);
//           intervalRef.current = null;
//           return 0;
//         }
//         return prev - 1;
//       });
//     }, 1000);

//     // ‚ö†Ô∏è After 3 hours (for demo, after 60 seconds), warning will be shown
//     timeoutRef.current = setTimeout(() => {
//       if (!emailSentRef.current) {
//         setShowWarning(true);
//         setMessage("‚ö†Ô∏è 3 hours have passed! Kindly click the next point");
//         sendDelayEmail();
//       }
//       setTimeLeft(0);
//       clearTimers();
//     }, seconds * 1000);
//   };

//   const formatTime = (seconds) => {
//     const h = Math.floor(seconds / 3600);
//     const m = Math.floor((seconds % 3600) / 60);
//     const s = seconds % 60;
//     return `${h.toString().padStart(2, "0")}:${m
//       .toString()
//       .padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
//   };

//   const handleCheckpoint = async (pointName) => {
//     setLoading(true);
//     setMessage("");
//     setShowWarning(false);

//     navigator.geolocation.getCurrentPosition(
//       async (position) => {
//         const gps = {
//           lat: position.coords.latitude,
//           lng: position.coords.longitude,
//         };
//         try {
//           await axios.post(`${API_BASE}/checkpoint`, { driverName, pointName, gps });
//           setMessage(`‚úÖ ${pointName} recorded successfully!`);
//           setCurrentIndex((prev) => prev + 1);
//           startTimer(60); // demo = 1 minute
//           fetchLogs();
//         } catch (err) {
//           console.error(err);
//           setMessage("‚ùå Error sending data!");
//         } finally {
//           setLoading(false);
//         }
//       },
//       (err) => {
//         console.error(err);
//         setLoading(false);
//         alert("GPS permission denied!");
//       }
//     );
//   };

//   const fetchLogs = async () => {
//     try {
//       const res = await axios.get(`${API_BASE}/logs`);
//       setLogs(res.data);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   useEffect(() => {
//     const interval = setInterval(fetchLogs, 5000);
//     return () => clearInterval(interval);
//   }, []);

//   useEffect(() => {
//     return () => {
//       clearTimers();
//     };
//   }, []);

//   const progressPercent = Math.round((currentIndex / checkpoints.length) * 100);
//   const progress = timeLeft > 0 ? (timeLeft / (3 * 60 * 60)) * 100 : 0;

//   return (
//     <div className="app-container">
//       <h1>üöõ Driver Log App</h1>

//       {/* Progress Bar */}
//       <div className="progress-bar">
//         <div
//           className="progress-fill"
//           style={{ width: `${progressPercent}%` }}
//         ></div>
//       </div>
//       <p className="progress-text">Progress: {progressPercent}%</p>

//       {/* Timer */}
//       {timeLeft > 0 && (
//         <div className="circle-timer">
//           <svg width="180" height="180">
//             <circle
//               stroke="url(#grad)"
//               strokeWidth="10"
//               fill="transparent"
//               r="75"
//               cx="90"
//               cy="90"
//               style={{
//                 strokeDasharray: `${2 * Math.PI * 75}`,
//                 strokeDashoffset: `${2 * Math.PI * 75 * ((100 - progress) / 100)}`,
//                 transition: "stroke-dashoffset 1s linear",
//               }}
//             />
//             <defs>
//               <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
//                 <stop offset="0%" stopColor="#00ff9d" />
//                 <stop offset="100%" stopColor="#00aaff" />
//               </linearGradient>
//             </defs>
//           </svg>
//           <div className="timer-text">{formatTime(timeLeft)}</div>
//         </div>
//       )}

//       {/* Buttons */}
//       <div className="button-container">
//         {checkpoints.map((point, i) => (
//           <button
//             key={i}
//             onClick={() => handleCheckpoint(point)}
//             disabled={loading || i !== currentIndex || showWarning}
//             className={`btn ${
//               i < currentIndex
//                 ? "completed"
//                 : i === currentIndex
//                 ? "active"
//                 : "upcoming"
//             }`}
//           >
//             {point}
//           </button>
//         ))}
//       </div>

//       {loading && <p>‚è≥ Sending data...</p>}

//       {/* ‚úÖ Screen Message + OK Button */}
//       {showWarning ? (
//         <div className="warning-box">
//           <p>{message}</p>
//           <button
//             className="ok-btn"
//             onClick={() => {
//               setShowWarning(false);
//               setMessage("");
//               setCurrentIndex((prev) => prev + 1);
//             }}
//           >
//             OK
//           </button>
//         </div>
//       ) : (
//         message && <p className="message">{message}</p>
//       )}

//       {/* Logs Table */}
//       <div className="table-container">
//         <h2>üìä Last 1 Minute Logs</h2>
//         <table>
//           <thead>
//             <tr>
//               <th>Point</th>
//               <th>Latitude</th>
//               <th>Longitude</th>
//               <th>Time</th>
//             </tr>
//           </thead>
//           <tbody>
//             {logs.length === 0 ? (
//               <tr>
//                 <td colSpan="5">No logs in the last 1 minute</td>
//               </tr>
//             ) : (
//               logs.map((log, li) =>
//                 log.checkpoints.map((cp, i) => (
//                   <tr key={`${li}-${i}`}>
//                     <td>{cp.pointName}</td>
//                     <td>{cp.gps.lat}</td>
//                     <td>{cp.gps.lng}</td>
//                     <td>{new Date(cp.timestamp).toLocaleTimeString()}</td>
//                   </tr>
//                 ))
//               )
//             )}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default App;






































// import React, { useState, useEffect, useRef } from "react";
// import axios from "axios";
// import "./App.css";

// const API_BASE = "http://localhost:5000/api";

// const App = () => {
//   const [driverName] = useState("");
//   const [loading, setLoading] = useState(false);
//   const [message, setMessage] = useState("");
//   const [logs, setLogs] = useState([]);
//   const [timeLeft, setTimeLeft] = useState(0);
//   const [currentIndex, setCurrentIndex] = useState(0);
//   const [showWarning, setShowWarning] = useState(false);

//   const intervalRef = useRef(null);
//   const timeoutRef = useRef(null);
//   const emailSentRef = useRef(false);

//   const checkpoints = [
//     "Leave Dealer Office",
//     "Arrive at UCIC Plant",
//     "Arrive at Sales Office",
//     "Arrive at Weighbridge",
//     "Leave UCIC Plant",
//     "Arrive at Delivery Location",
//   ];

//   const clearTimers = () => {
//     if (intervalRef.current) {
//       clearInterval(intervalRef.current);
//       intervalRef.current = null;
//     }
//     if (timeoutRef.current) {
//       clearTimeout(timeoutRef.current);
//       timeoutRef.current = null;
//     }
//   };

//   const sendDelayEmail = async () => {
//     if (emailSentRef.current) return;
//     emailSentRef.current = true;

//     try {
//       await axios.post(`${API_BASE}/delay-email`, { driverName });
//       console.log("Delay email sent!");
//     } catch (err) {
//       console.error("Email send failed", err);
//     }
//   };

//   const startTimer = (seconds) => {
//     clearTimers();
//     emailSentRef.current = false;
//     setShowWarning(false);
//     setTimeLeft(seconds);

//     intervalRef.current = setInterval(() => {
//       setTimeLeft((prev) => {
//         if (prev <= 1) {
//           clearInterval(intervalRef.current);
//           intervalRef.current = null;
//           return 0;
//         }
//         return prev - 1;
//       });
//     }, 1000);

//     timeoutRef.current = setTimeout(() => {
//       if (!emailSentRef.current) {
//         setShowWarning(true);
//         setMessage("‚ö†Ô∏è 3 hours have passed! Kindly click the next point");
//         sendDelayEmail();
//       }
//       setTimeLeft(0);
//       clearTimers();
//     }, seconds * 1000);
//   };

//   const formatTime = (seconds) => {
//     const h = Math.floor(seconds / 3600);
//     const m = Math.floor((seconds % 3600) / 60);
//     const s = seconds % 60;
//     return `${h.toString().padStart(2, "0")}:${m
//       .toString()
//       .padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
//   };

//   const handleCheckpoint = async (pointName) => {
//     setLoading(true);
//     setMessage("");
//     setShowWarning(false);

//     navigator.geolocation.getCurrentPosition(
//       async (position) => {
//         const gps = {
//           lat: position.coords.latitude,
//           lng: position.coords.longitude,
//         };
//         try {
//           await axios.post(`${API_BASE}/checkpoint`, {
//             driverName,
//             pointName,
//             gps,
//           });
//           setMessage(`‚úÖ ${pointName} recorded successfully!`);
//           setCurrentIndex((prev) => prev + 1);
//           startTimer(60); // demo = 1 minute
//           fetchLogs();
//         } catch (err) {
//           console.error(err);
//           setMessage("‚ùå Error sending data!");
//         } finally {
//           setLoading(false);
//         }
//       },
//       (err) => {
//         console.error(err);
//         setLoading(false);
//         alert("GPS permission denied!");
//       }
//     );
//   };

//   const fetchLogs = async () => {
//     try {
//       const res = await axios.get(`${API_BASE}/logs`);
//       setLogs(res.data);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   useEffect(() => {
//     const interval = setInterval(fetchLogs, 5000);
//     return () => clearInterval(interval);
//   }, []);

//   useEffect(() => {
//     return () => {
//       clearTimers();
//     };
//   }, []);

//   const progressPercent = Math.round((currentIndex / checkpoints.length) * 100);
//   const progress = timeLeft > 0 ? (timeLeft / (3 * 60 * 60)) * 100 : 0;

//   return (
//     <div className="app-container">
//       <h1>üöõ Driver Log App</h1>

//       {/* Progress Bar */}
//       <div className="progress-bar">
//         <div
//           className="progress-fill"
//           style={{ width: `${progressPercent}%` }}
//         ></div>
//       </div>
//       <p className="progress-text">Progress: {progressPercent}%</p>

//       {/* Timer */}
//       {timeLeft > 0 && (
//         <div className="circle-timer">
//           <svg width="180" height="180">
//             <circle
//               stroke="url(#grad)"
//               strokeWidth="10"
//               fill="transparent"
//               r="75"
//               cx="90"
//               cy="90"
//               style={{
//                 strokeDasharray: `${2 * Math.PI * 75}`,
//                 strokeDashoffset: `${2 * Math.PI * 75 * ((100 - progress) / 100)}`,
//                 transition: "stroke-dashoffset 1s linear",
//               }}
//             />
//             <defs>
//               <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
//                 <stop offset="0%" stopColor="#00ff9d" />
//                 <stop offset="100%" stopColor="#00aaff" />
//               </linearGradient>
//             </defs>
//           </svg>
//           <div className="timer-text">{formatTime(timeLeft)}</div>
//         </div>
//       )}

//       {/* Buttons */}
//       <div className="button-container">
//         {checkpoints.map((point, i) => (
//           <button
//             key={i}
//             onClick={() => handleCheckpoint(point)}
//             disabled={loading || i !== currentIndex || showWarning}
//             className={`btn ${
//               i < currentIndex
//                 ? "completed"
//                 : i === currentIndex
//                 ? "active"
//                 : "upcoming"
//             }`}
//           >
//             {point}
//           </button>
//         ))}
//       </div>

//       {loading && <p>‚è≥ Sending data...</p>}

//       {/* ‚úÖ Screen Message + OK Button */}
//       {showWarning ? (
//         <div className="warning-box">
//           <p>{message}</p>
//           <button
//             className="ok-btn"
//             onClick={() => {
//               setShowWarning(false);
//               setMessage("");
//               setCurrentIndex((prev) => prev + 1);
//             }}
//           >
//             OK
//           </button>
//         </div>
//       ) : (
//         message && <p className="message">{message}</p>
//       )}

//       {/* Logs Table */}
//       <div className="table-container">
//         <h2>üìä Last 1 Minute Logs</h2>
//         <table>
//           <thead>
//             <tr>
//               <th>Point</th>
//               <th>Location (Google Map)</th>
//               <th>Time</th>
//             </tr>
//           </thead>
//           <tbody>
//             {logs.length === 0 ? (
//               <tr>
//                 <td colSpan="5">No logs in the last 1 minute</td>
//               </tr>
//             ) : (
//               logs.map((log, li) =>
//                 log.checkpoints.map((cp, i) => (
//                   <tr key={`${li}-${i}`}>
//                     <td>{cp.pointName}</td>
//                     <td>
//                       <a
//                         href={`https://www.google.com/maps?q=${cp.gps.lat},${cp.gps.lng}`}
//                         target="_blank"
//                         rel="noopener noreferrer"
//                         style={{
//                           color: "blue",
//                           textDecoration: "underline",
//                           fontWeight: "bold",
//                         }}
//                       >
//                         üìç View on Google Maps
//                       </a>
//                     </td>
//                     <td>{new Date(cp.timestamp).toLocaleTimeString()}</td>
//                   </tr>
//                 ))
//               )
//             )}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default App;



































// import React, { useState, useEffect, useRef } from "react";
// import axios from "axios";
// import "./App.css";

// const API_BASE = "./api";

// const App = () => {
//   const [driverName] = useState("");
//   const [loading, setLoading] = useState(false);
//   const [message, setMessage] = useState("");
//   const [logs, setLogs] = useState([]);
//   const [timeLeft, setTimeLeft] = useState(0);
//   const [currentIndex, setCurrentIndex] = useState(0);
//   const [showWarning, setShowWarning] = useState(false);

//   const intervalRef = useRef(null);
//   const timeoutRef = useRef(null);
//   const emailSentRef = useRef(false);

//   // ‚úÖ Checkpoints (stages)
//   const checkpoints = [
//     "Leave Dealer Office",
//     "Arrive at UCIC Plant",
//     "Arrive at Sales Office",
//     "Arrive at Weighbridge",
//     "Leave UCIC Plant",
//     "Arrive at Delivery Location",
//   ];

//   // üßπ Clear running timers
//   const clearTimers = () => {
//     if (intervalRef.current) {
//       clearInterval(intervalRef.current);
//       intervalRef.current = null;
//     }
//     if (timeoutRef.current) {
//       clearTimeout(timeoutRef.current);
//       timeoutRef.current = null;
//     }
//   };

//   // üìß Send delay email
//   const sendDelayEmail = async () => {
//     if (emailSentRef.current) return;
//     emailSentRef.current = true;
//     try {
//       await axios.post(`${API_BASE}/delay-email`, { driverName });
//       console.log("Delay email sent!");
//     } catch (err) {
//       console.error("Email send failed", err);
//     }
//   };

//   // ‚è≤Ô∏è Start countdown timer
//   const startTimer = (seconds) => {
//     clearTimers();
//     emailSentRef.current = false;
//     setShowWarning(false);
//     setTimeLeft(seconds);

//     intervalRef.current = setInterval(() => {
//       setTimeLeft((prev) => {
//         if (prev <= 1) {
//           clearInterval(intervalRef.current);
//           intervalRef.current = null;
//           return 0;
//         }
//         return prev - 1;
//       });
//     }, 1000);

//     // For demo: after (seconds) ‚Üí show warning
//     timeoutRef.current = setTimeout(() => {
//       if (!emailSentRef.current) {
//         setShowWarning(true);
//         setMessage("‚ö†Ô∏è 3 hours have passed! Kindly click the next point");
//         sendDelayEmail();
//       }
//       setTimeLeft(0);
//       clearTimers();
//     }, seconds * 1000);
//   };

//   // üïí Time formatter
//   const formatTime = (seconds) => {
//     const h = Math.floor(seconds / 3600);
//     const m = Math.floor((seconds % 3600) / 60);
//     const s = seconds % 60;
//     return `${h.toString().padStart(2, "0")}:${m
//       .toString()
//       .padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
//   };

//   // üìç Handle Checkpoint ‚Äî captures *real* GPS
//   const handleCheckpoint = async (pointName) => {
//     setLoading(true);
//     setMessage("");
//     setShowWarning(false);

//     if (!navigator.geolocation) {
//       alert("‚ùå Geolocation not supported by your browser!");
//       setLoading(false);
//       return;
//     }

//     navigator.geolocation.getCurrentPosition(
//       async (position) => {
//         const gps = {
//           lat: position.coords.latitude,
//           lng: position.coords.longitude,
//         };

//         try {
//           // ‚úÖ Send exact coordinates to backend
//           await axios.post(`${API_BASE}/checkpoint`, { driverName, pointName, gps });

//           setMessage(`‚úÖ ${pointName} recorded successfully!`);
//           setCurrentIndex((prev) => prev + 1);
//           startTimer(60); // Demo timer (1 minute)
//           fetchLogs();
//         } catch (err) {
//           console.error(err);
//           setMessage("‚ùå Error sending data!");
//         } finally {
//           setLoading(false);
//         }
//       },
//       (err) => {
//         console.error(err);
//         setLoading(false);
//         alert("‚ùå GPS permission denied! Please allow location access for accurate tracking.");
//       },
//       { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 } // ‚úÖ High accuracy for real location
//     );
//   };

//   // üì¶ Fetch Logs from backend
//   const fetchLogs = async () => {
//     try {
//       const res = await axios.get(`${API_BASE}/logs`);
//       setLogs(res.data);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   useEffect(() => {
//     const interval = setInterval(fetchLogs, 5000);
//     return () => clearInterval(interval);
//   }, []);

//   useEffect(() => {
//     return () => {
//       clearTimers();
//     };
//   }, []);

//   // üìä Progress tracking
//   const progressPercent = Math.round((currentIndex / checkpoints.length) * 100);
//   const progress = timeLeft > 0 ? (timeLeft / (3 * 60 * 60)) * 100 : 0;

//   return (
//     <div className="app-container">
//       <h1>üöõ Driver Log App</h1>

//       {/* Progress Bar */}
//       <div className="progress-bar">
//         <div
//           className="progress-fill"
//           style={{ width: `${progressPercent}%` }}
//         ></div>
//       </div>
//       <p className="progress-text">Progress: {progressPercent}%</p>

//       {/* Timer */}
//       {timeLeft > 0 && (
//         <div className="circle-timer">
//           <svg width="180" height="180">
//             <circle
//               stroke="url(#grad)"
//               strokeWidth="10"
//               fill="transparent"
//               r="75"
//               cx="90"
//               cy="90"
//               style={{
//                 strokeDasharray: `${2 * Math.PI * 75}`,
//                 strokeDashoffset: `${2 * Math.PI * 75 * ((100 - progress) / 100)}`,
//                 transition: "stroke-dashoffset 1s linear",
//               }}
//             />
//             <defs>
//               <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
//                 <stop offset="0%" stopColor="#00ff9d" />
//                 <stop offset="100%" stopColor="#00aaff" />
//               </linearGradient>
//             </defs>
//           </svg>
//           <div className="timer-text">{formatTime(timeLeft)}</div>
//         </div>
//       )}

//       {/* Buttons */}
//       <div className="button-container">
//         {checkpoints.map((point, i) => (
//           <button
//             key={i}
//             onClick={() => handleCheckpoint(point)}
//             disabled={loading || i !== currentIndex || showWarning}
//             className={`btn ${
//               i < currentIndex
//                 ? "completed"
//                 : i === currentIndex
//                 ? "active"
//                 : "upcoming"
//             }`}
//           >
//             {point}
//           </button>
//         ))}
//       </div>

//       {loading && <p>‚è≥ Sending data...</p>}

//       {/* Warning Message */}
//       {showWarning ? (
//         <div className="warning-box">
//           <p>{message}</p>
//           <button
//             className="ok-btn"
//             onClick={() => {
//               setShowWarning(false);
//               setMessage("");
//               setCurrentIndex((prev) => prev + 1);
//             }}
//           >
//             OK
//           </button>
//         </div>
//       ) : (
//         message && <p className="message">{message}</p>
//       )}

//       {/* Logs Table */}
//       <div className="table-container">
//         <h2>üìç Exact Location Logs (Live)</h2>
//         <table>
//           <thead>
//             <tr>
//               <th>Point</th>
//               <th>Location</th>
//               <th>Time</th>
//             </tr>
//           </thead>
//           <tbody>
//             {logs.length === 0 ? (
//               <tr>
//                 <td colSpan="3">No logs found yet</td>
//               </tr>
//             ) : (
//               logs.map((log, li) =>
//                 log.checkpoints.map((cp, i) => (
//                   <tr key={`${li}-${i}`}>
//                     <td>{cp.pointName}</td>
//                     <td>
//                       <a
//                         href={`https://www.google.com/maps?q=${cp.gps.lat},${cp.gps.lng}`}
//                         target="_blank"
//                         rel="noopener noreferrer"
//                         style={{ color: "blue", textDecoration: "underline" }}
//                       >
//                         üìç View on Google Maps
//                       </a>
//                     </td>
//                     <td>{new Date(cp.timestamp).toLocaleTimeString()}</td>
//                   </tr>
//                 ))
//               )
//             )}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default App;














































import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import "./App.css";

// ‚úÖ ÿß⁄Øÿ± ÿ¢Ÿæ Vercel Ÿæÿ± backend ⁄ÜŸÑÿß ÿ±€Å€í €Å€å⁄∫ÿå €å€Åÿß⁄∫ ÿßŸæŸÜÿß backend URL ŸÑ⁄Øÿßÿ¶€å⁄∫
const API_BASE = "./api";

const App = () => {
  const [driverName] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [logs, setLogs] = useState([]);
  const [timeLeft, setTimeLeft] = useState(0);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showWarning, setShowWarning] = useState(false);

  const intervalRef = useRef(null);
  const timeoutRef = useRef(null);
  const emailSentRef = useRef(false);

  // ‚úÖ ⁄Ü€å⁄© ŸæŸàÿßÿ¶ŸÜŸπÿ≥ ‚Äî ⁄àÿ±ÿßÿ¶€åŸàÿ± ⁄©€í ŸÖÿ±ÿßÿ≠ŸÑ
  const checkpoints = [
    "⁄à€åŸÑÿ± ÿ¢ŸÅÿ≥ ÿ≥€í ÿ±ŸàÿßŸÜ€Å €ÅŸà⁄∫",
    "€åŸà ÿ≥€å ÿ¢ÿ¶€å ÿ≥€å ŸæŸÑÿßŸÜŸπ Ÿæÿ± Ÿæ€ÅŸÜ⁄Ü ⁄Øÿ¶€í",
    "ÿ≥€åŸÑÿ≤ ÿ¢ŸÅÿ≥ Ÿæÿ± Ÿæ€ÅŸÜ⁄Ü ⁄Øÿ¶€í",
    "Ÿà€å ÿ®ÿ±€åÿ¨ Ÿæÿ± Ÿæ€ÅŸÜ⁄Ü ⁄Øÿ¶€í",
    "€åŸà ÿ≥€å ÿ¢ÿ¶€å ÿ≥€å ŸæŸÑÿßŸÜŸπ ÿ≥€í ÿ±ŸàÿßŸÜ€Å €ÅŸà⁄∫",
    "⁄àŸÑ€åŸàÿ±€å ŸÖŸÇÿßŸÖ Ÿæÿ± Ÿæ€ÅŸÜ⁄Ü ⁄Øÿ¶€í",
  ];

  // üßπ Ÿπÿßÿ¶ŸÖÿ± ÿµÿßŸÅ ⁄©ÿ±ŸÜ€í ⁄©ÿß ŸÅŸÜ⁄©ÿ¥ŸÜ
  const clearTimers = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  // üìß ÿ™ÿßÿÆ€åÿ± ⁄©€å ÿßÿ∑ŸÑÿßÿπ ŸàÿßŸÑÿß ÿß€å ŸÖ€åŸÑ
  const sendDelayEmail = async () => {
    if (emailSentRef.current) return;
    emailSentRef.current = true;
    try {
      await axios.post(`${API_BASE}/delay-email`, { driverName });
      console.log("ÿß€å ŸÖ€åŸÑ ⁄©ÿßŸÖ€åÿßÿ®€å ÿ≥€í ÿ®⁄æ€åÿ¨€å ⁄Øÿ¶€å€î");
    } catch (err) {
      console.error("ÿß€å ŸÖ€åŸÑ ÿ®⁄æ€åÿ¨ŸÜ€í ŸÖ€å⁄∫ ÿÆÿ±ÿßÿ®€å:", err);
    }
  };

  // ‚è≤Ô∏è Ÿπÿßÿ¶ŸÖÿ± ÿ¥ÿ±Ÿàÿπ ⁄©ÿ±ŸÜÿß
  const startTimer = (seconds) => {
    clearTimers();
    emailSentRef.current = false;
    setShowWarning(false);
    setTimeLeft(seconds);

    intervalRef.current = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    timeoutRef.current = setTimeout(() => {
      if (!emailSentRef.current) {
        setShowWarning(true);
        setMessage("‚ö†Ô∏è 3 ⁄Ø⁄æŸÜŸπ€í ⁄Øÿ≤ÿ± ⁄Ü⁄©€í €Å€å⁄∫! ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ÿß⁄ØŸÑÿß ŸæŸàÿßÿ¶ŸÜŸπ ÿØÿ®ÿßÿ¶€å⁄∫€î");
        sendDelayEmail();
      }
      setTimeLeft(0);
      clearTimers();
    }, seconds * 1000);
  };

  // üïí ŸàŸÇÿ™ ÿØ⁄©⁄æÿßŸÜ€í ⁄©ÿß ŸÅŸÜ⁄©ÿ¥ŸÜ
  const formatTime = (seconds) => {
    const h = Math.floor(seconds / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    return `${h.toString().padStart(2, "0")}:${m
      .toString()
      .padStart(2, "0")}:${s.toString().padStart(2, "0")}`;
  };

  // üìç ⁄Ü€å⁄© ŸæŸàÿßÿ¶ŸÜŸπ €Å€åŸÜ⁄àŸÑ ‚Äî GPS ⁄©€í ÿ≥ÿßÿ™⁄æ
  const handleCheckpoint = async (pointName) => {
    setLoading(true);
    setMessage("");
    setShowWarning(false);

    if (!navigator.geolocation) {
      alert("‚ùå ÿ¢Ÿæ ⁄©ÿß ÿ®ÿ±ÿßÿ§ÿ≤ÿ± GPS ÿ≥ŸæŸàÿ±Ÿπ ŸÜ€Å€å⁄∫ ⁄©ÿ±ÿ™ÿß!");
      setLoading(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const gps = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };

        try {
          await axios.post(`${API_BASE}/checkpoint`, {
            driverName,
            pointName,
            gps,
          });

          setMessage(`‚úÖ ${pointName} ⁄©ÿßŸÖ€åÿßÿ®€å ÿ≥€í ÿ±€å⁄©ÿßÿ±⁄à €ÅŸà ⁄Ø€åÿß!`);
          setCurrentIndex((prev) => prev + 1);
          startTimer(60); // ⁄à€åŸÖÿß ⁄©€í ŸÑ€å€í 1 ŸÖŸÜŸπ
          fetchLogs();
        } catch (err) {
          console.error(err);
          setMessage("‚ùå ⁄à€åŸπÿß ÿ®⁄æ€åÿ¨ŸÜ€í ŸÖ€å⁄∫ ÿÆÿ±ÿßÿ®€å!");
        } finally {
          setLoading(false);
        }
      },
      (err) => {
        console.error(err);
        alert("‚ùå ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ŸÑŸà⁄©€åÿ¥ŸÜ ÿß€å⁄©ÿ≥€åÿ≥ ⁄©€å ÿßÿ¨ÿßÿ≤ÿ™ ÿØ€å⁄∫!");
        setLoading(false);
      },
      { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
    );
  };

  // üì¶ ŸÑÿß⁄Øÿ≤ ÿ≠ÿßÿµŸÑ ⁄©ÿ±€å⁄∫
  const fetchLogs = async () => {
    try {
      const res = await axios.get(`${API_BASE}/logs`);
      if (Array.isArray(res.data)) {
        setLogs(res.data);
      } else {
        setLogs([]); // ÿß⁄Øÿ± ÿ∫ŸÑÿ∑ ⁄à€åŸπÿß €ÅŸà ÿ™Ÿà ÿÆÿßŸÑ€å array ÿ±⁄©⁄æ€å⁄∫
      }
    } catch (err) {
      console.error("ŸÑÿß⁄Øÿ≤ ŸÑŸà⁄à ⁄©ÿ±ŸÜ€í ŸÖ€å⁄∫ ÿÆÿ±ÿßÿ®€å:", err);
    }
  };

  useEffect(() => {
    fetchLogs();
    const interval = setInterval(fetchLogs, 5000);
    return () => clearInterval(interval);
  }, []);

  useEffect(() => clearTimers, []);

  const progressPercent = Math.round((currentIndex / checkpoints.length) * 100);
  const progress = timeLeft > 0 ? (timeLeft / (3 * 60 * 60)) * 100 : 0;

  return (
    <div className="app-container">
      <h1>üöõ ⁄àÿ±ÿßÿ¶€åŸàÿ± ŸÑÿß⁄Ø ÿß€åŸæ</h1>

      <div className="progress-bar">
        <div className="progress-fill" style={{ width: `${progressPercent}%` }}></div>
      </div>
      <p className="progress-text">ÿ™ÿ±ŸÇ€å: {progressPercent}%</p>

      {timeLeft > 0 && (
        <div className="circle-timer">
          <svg width="180" height="180">
            <circle
              stroke="url(#grad)"
              strokeWidth="10"
              fill="transparent"
              r="75"
              cx="90"
              cy="90"
              style={{
                strokeDasharray: `${2 * Math.PI * 75}`,
                strokeDashoffset: `${2 * Math.PI * 75 * ((100 - progress) / 100)}`,
                transition: "stroke-dashoffset 1s linear",
              }}
            />
            <defs>
              <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#00ff9d" />
                <stop offset="100%" stopColor="#00aaff" />
              </linearGradient>
            </defs>
          </svg>
          <div className="timer-text">{formatTime(timeLeft)}</div>
        </div>
      )}

      <div className="button-container">
        {checkpoints.map((point, i) => (
          <button
            key={i}
            onClick={() => handleCheckpoint(point)}
            disabled={loading || i !== currentIndex || showWarning}
            className={`btn ${
              i < currentIndex ? "completed" : i === currentIndex ? "active" : "upcoming"
            }`}
          >
            {point}
          </button>
        ))}
      </div>

      {loading && <p>‚è≥ ⁄à€åŸπÿß ÿ®⁄æ€åÿ¨ÿß ÿ¨ÿß ÿ±€Åÿß €Å€í...</p>}

      {showWarning ? (
        <div className="warning-box">
          <p>{message}</p>
          <button
            className="ok-btn"
            onClick={() => {
              setShowWarning(false);
              setMessage("");
              setCurrentIndex((prev) => prev + 1);
            }}
          >
            Ÿπ⁄æ€å⁄© €Å€í
          </button>
        </div>
      ) : (
        message && <p className="message">{message}</p>
      )}

      <div className="table-container">
        <h2>üìç ÿØÿ±ÿ≥ÿ™ GPS ŸÑÿß⁄Øÿ≤ (ŸÑÿßÿ¶€åŸà)</h2>
        <table>
          <thead>
            <tr>
              <th>ŸæŸàÿßÿ¶ŸÜŸπ</th>
              <th>ŸÖŸÇÿßŸÖ</th>
              <th>ŸàŸÇÿ™</th>
            </tr>
          </thead>
          <tbody>
            {Array.isArray(logs) && logs.length > 0 ? (
              logs.map((log, li) =>
                Array.isArray(log.checkpoints)
                  ? log.checkpoints.map((cp, i) => (
                      <tr key={`${li}-${i}`}>
                        <td>{cp.pointName}</td>
                        <td>
                          <a
                            href={`https://www.google.com/maps?q=${cp.gps.lat},${cp.gps.lng}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            style={{ color: "blue", textDecoration: "underline" }}
                          >
                            üìç ⁄ØŸà⁄ØŸÑ ŸÖ€åŸæÿ≥ Ÿæÿ± ÿØ€å⁄©⁄æ€å⁄∫
                          </a>
                        </td>
                        <td>{new Date(cp.timestamp).toLocaleTimeString()}</td>
                      </tr>
                    ))
                  : null
              )
            ) : (
              <tr>
                <td colSpan="3">ÿßÿ®⁄æ€å ⁄©Ÿàÿ¶€å ÿ±€å⁄©ÿßÿ±⁄à ŸÜ€Å€å⁄∫ ŸÖŸÑÿß</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default App;


